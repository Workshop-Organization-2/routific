# Configuration of the router's HTTP server
# Default configuration for container
supergraph:
  # The socket address and port to listen on
  listen: 0.0.0.0:${env.PORT:-4000}
  introspection: true

# For demo purposes - can remove or enable homepage
sandbox:
  enabled: true
homepage:
  enabled: false

limits:
  max_depth: 5
  max_height: 10
  max_aliases: 3

cors:
  origins:
    - https://studio.apollographql.com
  allow_credentials: true

# This would make debugging easier, but should be a per subgraph basis for production
include_subgraph_errors:
  all: true # Propagate errors from all subgraphs

subscription:
  mode:
    passthrough:
       # docker setup, for local setup comment out the following section
       subgraphs:
        products:
         path: /

## Enter Workshop Module Configs Below
## Authentication and Authorization Module
authentication:
  router:
    jwt:
      header_name: Authorization
      header_value_prefix: Bearer
      jwks:
        - url: https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com

authorization:
  require_authentication: false
  preview_directives: 
    enabled: true
## Seperatly deployed coprocess that we will use to scrub data from our graphql response. In this example, customer credit cards, but we could use this for 
## scrubbing data based on org settings or requirements.
coprocessor:
  url: https://coprocessor-wn3vwa6nlq-ue.a.run.app 
  timeout: 2s 
  router:
    response:
      body: true

## We are going to persite and safelist queries so people and only use queries that we say are ok to run.
## This stops abuse, but I feel like breaks the flexibility of GQL, will have to dig deeper
preview_persisted_queries:
  enabled: true
  # safelist: 
  #   enabled: true
  #   require_id: false
apq:
  enabled: false


